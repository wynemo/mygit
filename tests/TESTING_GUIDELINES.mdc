---
description: 
globs: 
alwaysApply: false
---
# 测试代码修改指南

## 测试失败处理流程

当测试代码失败时，请按照以下步骤进行处理：

1. **首先检查测试代码**
   - 检查测试用例的假设是否正确
   - 验证测试数据是否合理
   - 确认测试环境设置是否正确
   - 检查测试逻辑是否符合预期

2. **分析失败原因**
   - 记录测试失败的具体错误信息
   - 分析测试期望值和实际值的差异
   - 确定是测试代码问题还是被测试代码问题

3. **修改测试代码**
   - 如果确认是测试代码问题，可以直接修改测试代码
   - 修改后需要确保测试逻辑仍然正确
   - 添加详细的注释说明修改原因

4. **修改被测试代码**
   - 如果需要修改被测试代码，必须先获得用户授权
   - 提供详细的修改原因和影响分析
   - 说明修改后的预期效果

## 修改被测试代码的授权流程

如果需要修改被测试代码，请按照以下步骤进行：

1. **提交修改请求**
   - 详细说明当前问题
   - 提供测试失败的日志
   - 解释为什么需要修改被测试代码

2. **提供修改方案**
   - 说明具体的修改内容
   - 分析修改的影响范围
   - 提供修改后的测试用例

3. **等待用户授权**
   - 在获得用户明确授权前，不得修改被测试代码
   - 如果用户拒绝修改，需要寻找其他解决方案

4. **执行修改**
   - 获得授权后，按照方案进行修改
   - 确保修改不会引入新的问题
   - 更新相关文档和注释

## 测试代码编写规范

1. **测试用例设计**
   - 每个测试用例应该只测试一个功能点
   - 测试用例应该包含清晰的注释说明
   - 测试数据应该具有代表性

2. **测试环境设置**
   - 正确设置测试环境
   - 清理测试数据
   - 确保测试环境的一致性

3. **测试断言**
   - 使用明确的断言语句
   - 提供有意义的错误信息
   - 避免过于复杂的断言逻辑

4. **测试文档**
   - 记录测试用例的目的
   - 说明测试数据的来源
   - 记录已知的限制和假设

## 示例

### 测试代码问题示例

```python
# 错误的测试代码
def test_scroll_with_equal_chunks(self):
    self.viewer._on_scroll(500, True)
    self.assertEqual(self.right_scroll.setValue.call_args[0][0], 500)

# 正确的测试代码
def test_scroll_with_equal_chunks(self):
    # 计算平均行高
    avg_line_height = 2000 / 100  # 20
    
    # 模拟光标位置在第5行
    cursor = Mock()
    cursor.blockNumber.return_value = 5
    self.left_edit.cursorForPosition.return_value = cursor
    
    # 计算期望的滚动值
    expected_scroll = 5 * avg_line_height  # 100
    
    # 调用滚动方法
    self.viewer._on_scroll(100, True)
    
    # 验证右侧滚动条被设置为正确的位置
    self.right_scroll.setValue.assert_called_once()
    self.assertEqual(self.right_scroll.setValue.call_args[0][0], expected_scroll)
```

### 修改请求示例

```markdown
## 修改请求：滚动同步问题

### 问题描述
测试用例 `test_scroll_with_equal_chunks` 失败，期望滚动值为 500，实际值为 100。

### 原因分析
当前滚动计算逻辑没有考虑文档的实际高度和行数，导致滚动值计算错误。

### 修改方案
1. 修改 `_on_scroll` 方法中的滚动计算逻辑
2. 使用文档的实际高度和行数计算滚动值
3. 更新相关测试用例

### 影响分析
- 影响范围：滚动同步功能
- 风险：低
- 测试覆盖：已更新测试用例

### 请求授权
请授权修改 `text_diff_viewer.py` 中的 `_on_scroll` 方法。
``` 