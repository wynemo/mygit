# 文本处理函数
import re
import html
import markdown2
import json
from bs4 import BeautifulSoup
from bs4.element import NavigableString
from markdown2 import markdown
from core.config import settings
from services.fastgpt import fastgpt_process
from services.qwen_voice import call_qwen_voice_api
from services.language import fasttext_is_language
from core.enums import get_voice_config_by_lang
from core.logger import setup_logger
import threading
from queue import Queue, Empty
from typing import Generator
import time
import sys
import os # Added import
from core.text_buffer import TextBuffer
from core.enums import get_doubao_voice_config
from services.doubao_voice import doubao_text_to_url
import uuid
from concurrent.futures import ThreadPoolExecutor

logger = setup_logger(__name__)

def process_image_sizes(text):
    """处理图片尺寸的预处理器"""
    def replace(match):
        alt = match.group(1)
        url = match.group(2)
        width = match.group(3)
        height = match.group(4) if match.group(4) else width

        return f'<img src="{url}" alt="{alt}" width="{width}" height="{height}">'

    # 匹配带尺寸的图片语法
    pattern = r'!\[(.*?)\]\((.*?)\)\{(\d+)(?:x(\d+))?\}'
    return re.sub(pattern, replace, text)

# 创建图片预处理器类
class ImagePreprocessor:
    def run(self, text):
        import re
        pattern = r'!\[(.*?)\]\((.*?)\)(\{\{\{.*?\}\}\})?'
        def replace(match):
            alt = match.group(1)
            src = match.group(2)
            attrs = match.group(3)
            if attrs:
                width = re.search(r'width="(\d+)"', attrs)
                height = re.search(r'height="(\d+)"', attrs)
                img_attrs = []
                if width:
                    img_attrs.append(f'width="{width.group(1)}"')
                if height:
                    img_attrs.append(f'height="{height.group(1)}"')
                return f'<img src="{src}" alt="{alt}" {" ".join(img_attrs)}>'
            return f'<img src="{src}" alt="{alt}">'
        return re.sub(pattern, replace, text)

# 初始化 Markdown 转换器（模块级别）
markdown_converter = markdown2.Markdown(extras=[
    'tables',
    'fenced-code-blocks',
    'markdown-in-html',
    'break-on-newline',
    'attr_list',
    'images',
    'cuddled-lists',
    'task_list',
    'sane_lists',
    'footnotes',
    'strike',
    'toc',
    'wiki-tables',
    'tables_extra',
    'html-classes',
    'numbering',
    'def_list',
    'containers',
    'emoji',
    'header-ids',
    'smarty-pants',
    'markdown-in-html',
    'ordinal-lists',
])

def convert_markdown_to_html(markdown_text):
    """转换 Markdown 为 HTML 的主函数"""
    # 预处理表格分隔符，确保使用正确的短横线
    def normalize_table_separators(text):
        # 将所有表格分隔符中的长横线（—）替换为短横线（-）
        text = re.sub(r'\|\s*[—]+\s*\|', '| - |', text)
        # 保持多列表格的格式
        text = re.sub(r'\|\s*[—]+\s*(?=\|)', '| - ', text)
        return text

    # 解码整个文本的 HTML 实体
    processed_text = html.unescape(markdown_text)

    # 规范化表格分隔符
    processed_text = normalize_table_separators(processed_text)

    # 预处理图片
    # processed_text = process_image_sizes(processed_text)
    # processed_text = ImagePreprocessor().run(processed_text)

    # 使用全局的 markdown 转换器
    html_content = markdown_converter.convert(processed_text)

    return html_content


# 使用markdown2库将md转换为纯文本，
# 增加了代码使其更改后以保留序号
def convert_text_to_plain_markdown2(text: str) -> str:
    """使用markdown2库将md转换为纯文本,保留序号和原始换行格式"""
    logger.debug("\n[DEBUG] 开始转换 Markdown 为纯文本...")
    logger.debug(f"[DEBUG] 原始输入文本:\n{text}")

    # 如果文本不包含任何Markdown标记，直接返回原文本
    if not any(marker in text for marker in ['#', '*', '_', '`', '>', '-', '+', '[', ']', '|']):
        return text

    # 转换为HTML
    html_content = convert_markdown_to_html(text)
    logger.debug(f"[DEBUG] 转换后的 HTML:\n{json.dumps(html_content, ensure_ascii=False)}")

    # 使用BeautifulSoup处理HTML，保留换行符
    soup = BeautifulSoup(html_content, 'html.parser')

    # 添加序号到列表项
    add_numbers_to_li(soup)

    for img in soup.find_all('img'):
        # img_md = soup.new_string(f'![{img.get("alt", "")}]({img.get("src", "")})')
        img_md = soup.new_string(f'![{img.get("alt", "")}]({img.get("src", "")})')
        img.replace_with(img_md)

    # 获取所有文本内容，保留换行和空格
    text_content = soup.get_text(separator='\n', strip=False)

    # 保持原始的前后空行和缩进
    leading_spaces = len(text) - len(text.lstrip())
    leading_newlines = len(text) - len(text.lstrip('\n'))
    trailing_spaces = len(text) - len(text.rstrip())
    trailing_newlines = len(text) - len(text.rstrip('\n'))

    # 重建文本，保留原始格式
    result = (
        '\n' * leading_newlines +
        ' ' * leading_spaces +
        text_content.strip() +
        ' ' * trailing_spaces +
        '\n' * trailing_newlines
    )

    logger.debug(f"[DEBUG] 提取的纯文本:\n{result}")
    return result

def add_numbers_to_li(soup):

    # 找到所有的 ol 标签
    for ol in soup.find_all('ol'):
        # 对每个 ol 中的 li 进行编号
        for i, li in enumerate(ol.find_all('li', recursive=False), 1):
            # 在 li 的开头插入序号
            li.insert(0, NavigableString(f"{i}. "))

# 按照 '|' 符号分段
# 返回一个列表，列表中的每个元素是一个字符串
# 在分段过程中 需要保留 '|' 符号
def split_by_pipe(text):
    """
    按 '|' 符号分段，保留 '|' 符号、换行符和其他特殊字符。
    如果没有 '|' 符号，则返回包含原始文本的列表。
    返回:
        list: 包含分段后文本的列表，每个分段都包含 '|' 符号
    """
    # 如果文本中没有 '|' 符号，直接返回原文本作为列表的唯一元素
    if '|' not in text:
        logger.debug(f"[DEBUG] 文本中没有分隔符，返回原文本: [{text}]")
        return [text]

    # # 如果文本不是以 '|' 开头，在开头添加一个
    # if not text.startswith('|'):
    #     text = '|' + text

    # 使用正则表达式进行分割，使用 lookahead 来保留分隔符
    segments = re.split(r'(?=\|)', text)

    logger.debug(f"[DEBUG] 分段结果: {segments}")  # 调试信息
    return segments

"""
定义一个函数 : 去除掉文本中的所有非文本内容

这一段是 发给qwen之前的文本处理  避免qwen处理非文本内容出现错误

包含公式的处理逻辑不需要调用以下函数，因为在AI对话中会单独进行处理
"""
def remove_all_symbols(input_text):
    # 定义各语言的 Unicode 范围
    ranges = {
        'zh': r'\u4e00-\u9fff',  # 中文
        'en': r'A-Za-z',         # 英文
        'ja': r'\u3040-\u30ff\u31f0-\u31ff\u3400-\u4dbf',  # 日文
        'ar': r'\u0600-\u06ff',  # 阿拉伯文
        'es_fr_de': r'\u00C0-\u00FF',  # 西班牙文、法文、德文（含重音字符）
        'ru': r'\u0400-\u04FF',  # 俄文
        'el': r'\u0370-\u03FF',  # 希腊字母
        'digits': r'0-9'         # 数字
    }

    # 合并所有语言的字符范围
    allowed_characters = ''.join(ranges.values())

    # 创建正则表达式模式，匹配不在允许范围内的字符
    pattern = re.compile(f'[^{allowed_characters}]')

    # 将不在允许范围内的字符替换为空格
    filtered_text = pattern.sub(' ', input_text)

    # 去除多余的连续空格
    filtered_text = re.sub(r'\s+', ' ', filtered_text).strip()

    return filtered_text

# 判断文本中是否含有公式
def has_formula(text_segment):
    """
    判断文本段是否包含 LaTeX 公式。
    """
    latex_patterns = [
        r'\$\$.*?\$\$',                    # 双美元符号包围的公式
        r'\$(?!\d+(?:\.\d+)?(?!\d)).*?\$', # 单美元符号包围的公式（排除金额）
        r'\\\(.*?\\\)',                    # \( \) 包围的公式
        r'\\\[.*?\\\]',                    # \[ \] 包围的公式
        r'\\begin\{[^}]+\}.*?\\end\{[^}]+\}'  # \begin{} \end{} 环境，允许不同环境名
    ]

    for pattern in latex_patterns:
        if re.search(pattern, text_segment, re.DOTALL):
            return True
    return False

def generate_chat_id():
    """生成一个随机的 chatId，长度小于250"""
    return str(uuid.uuid4())[:8]  # 使用 UUID 的前8位作为 chatId

def handle_formula_segment(text_segment):
    """处理包含公式的文本段"""
    logger.debug(f"\n[DEBUG] 处理公式段: {text_segment}")
    # 定义一个messages 列表
    messages = [
        {"role": "user", "content": text_segment}
    ]

    # 调用fastgpt的AI对话接口
    chat_id=generate_chat_id()
    try:
        fastgpt_response = fastgpt_process(api_key=settings.FASTGPT_API_KEY,
            chat_id=chat_id,
            messages=messages)
    except Exception as e:
        logger.error(f"[DEBUG] 调用fastgpt的AI对话接口失败: {e}")
        return None

    return fastgpt_response



def handle_non_formula_segment(text_segment):
    """
    处理不包含公式的文本段，保留原有的空白字符和分隔符。


    返回:
        list: 包含分段后文本的列表
    """
    logger.debug(f"\n[DEBUG] 处理非公式段: {text_segment}")

    split_pattern = r'([，；,。,;])'

    # 检查是否包含任何分隔符
    if not re.search(split_pattern, text_segment):
        logger.debug(f"[DEBUG] 没有分隔符，返回原文本: [{text_segment}]")
        return [text_segment]

    # 使用re.split并保留分隔符
    parts = re.split(split_pattern, text_segment)

    # 合并分隔符和文本
    result = []
    for i in range(0, len(parts)-1, 2):
        if parts[i]:  # 如果文本部分不为空
            result.append(parts[i] + parts[i+1])

    # 处理最后一个部分
    if parts[-1]:
        result.append(parts[-1])

    logger.debug(f"[DEBUG] 处理后的列表: {result}")
    return result



# 定义函数： 判断当前文本是否全是空格
def is_all_space(text):
    """
    判断当前文本是否全是空白字符（包括空格、制表符、换行符等）
    返回:
        bool: True 如果文本只包含空白字符，False 否则
    """
    if not text:  # 处理空字符串
        return True

    # 检查是否所有字符都是空白字符
    # string.whitespace 包含所有空白字符: 空格、制表符、换行符等
    return all(char.isspace() for char in text)

# 定义函数：公式语音处理
def formula_voice_process(index, source_text, pure_text, headers=None):
    """
    处理公式语音
    index： 序号编号
    source_text： 原始文本
    pure_text： 纯文本 经过markdown2转换后的文本
    """
    # 调用FastGPT的AI 对话功能
    fastgpt_response = handle_formula_segment(pure_text)
    logger.debug(f"[DEBUG] 返回数据: {fastgpt_response}")
    # 判断当前文本是否是纯文本  或者字段为空
    if is_all_space(fastgpt_response) or fastgpt_response == None:
        logger.debug(f"[DEBUG] 返回数据是纯文本: {fastgpt_response}")
        return {
            "index": index,
            "text": fastgpt_response,# 翻译过后的文本
            "content": source_text, # 原始文本
            "tts": settings.EMPTY_VOICE_URL, # 默认空音频
        }  # 返回默认音频  这里是出现错误后的运行逻辑处理

    # 使用文本函数检查语言类型  以下使用的是fasttext库
    language, confidence = fasttext_is_language(fastgpt_response)

    voice_config = get_voice_config_by_lang(language)
    if not headers:
        headers = {}

    #qwen
    model = headers.get('model', voice_config.get("model"))
    voice = headers.get("voice", voice_config.get("voice"))

    audio_model = headers.get("audio_model", "qwen")

    if audio_model == "doubao":
        config = get_doubao_voice_config(headers, language)
        tts = doubao_text_to_url(fastgpt_response, config)
    else:
        # 调用qwen的音频处理接口
        tts = call_qwen_voice_api(api_key=settings.QWEN_VOICE_API_KEY, text=fastgpt_response, model=model, voice=voice)

    logger.debug(f"[DEBUG] 返回数据: {fastgpt_response}")

    # 构建返回值
    result = {
        "index": index,  # 应该定义一个全局变量 来记录当前的index 因为整个列表的index 是连续的
        "text": fastgpt_response, #fastgpt 翻译后的文本
        "content": source_text,  # 最开始没有做任何处理的原始文本
        "tts": tts,
        "language": language,
        "confidence": confidence
    }
    return result

def has_image(text):
    """检查文本是否包含图片链接"""
    # 匹配markdown格式的图片链接
    image_patterns = [
        r'!\[.*?\]\(.*?\)',           # 基本图片语法 ![alt](url)
        r'!\[.*?\]\(.*?\)\{.*?\}',    # 带尺寸的图片 ![alt](url){100x200}
        r'<img.*?>'                    # HTML格式图片标签
    ]

    for pattern in image_patterns:
        if re.search(pattern, text):
            return True
    return False

# 定义函数： 处理普通文本
def normal_text_process(index, source_text, pure_text, headers=None):
    """
    处理普通文本
    1、检查是否包含图片链接
    2、删除掉非文本内容
    3、判断是否为全是空格
    4、判断语言类型
    5、调用qwen的音频处理接口

    index： 序号编号
    source_text： 原始文本
    pure_text： 纯文本 经过markdown2转换后的文本
    """
    logger.info(f"\n[DEBUG] 开始处理普通文本:原始文本是{repr(source_text)} 纯文本是{pure_text}")

    try:
        # 1. 首先检查是否包含图片链接
        if has_image(pure_text):
            logger.info("[DEBUG] 检测到图片链接，返回空音频")
            return {
                "index": index,
                "text": pure_text,
                "content": source_text,
                "tts": settings.EMPTY_VOICE_URL,
                "status": "success"  # 添加状态标记
            }

        # 2. 删除非文本内容
        filtered_text = remove_all_symbols(pure_text)
        logger.debug(f"[DEBUG] 过滤后的文本: {filtered_text}")

        # 3. 判断是否全是空格
        if is_all_space(filtered_text):
            logger.info(f"{index} {pure_text} {repr(source_text)}")
            return {
                "index": index,
                "text": pure_text,
                "content": source_text,
                "tts": settings.EMPTY_VOICE_URL,
            }

        # 4. 判断语言类型
        language, confidence = fasttext_is_language(filtered_text)
        logger.debug(f"[DEBUG] 检测到语言: {language}, 置信度: {confidence}")

        # 获取对应语言的语音配置
        voice_config = get_voice_config_by_lang(language)
        if not headers:
            headers = {}

        # qwen
        model = headers.get('model', voice_config.get("model"))
        voice = headers.get("voice", voice_config.get("voice"))

        audio_model = headers.get("audio_model", "qwen")

        try:
            if audio_model == "doubao":
                config = get_doubao_voice_config(headers, language)
                tts = doubao_text_to_url(filtered_text, config)
            else:
                # 5. 调用qwen的音频处理接口
                tts = call_qwen_voice_api(
                    api_key=settings.QWEN_VOICE_API_KEY,
                    text=filtered_text,
                    model=model,
                    voice=voice
                )
            logger.debug("[DEBUG] 音频生成成功")
        except Exception:
            logger.exception("[DEBUG] 音频生成失败")
            return {
                "index": index,
                "text": pure_text,
                "content": source_text,
                "tts": settings.EMPTY_VOICE_URL,
            }

        # 构建返回结果
        result = {
            "index": index,
            "text": filtered_text,
            "content": source_text,
            "tts": tts,
            "language": language,
            "confidence": confidence
        }

        logger.debug(f"[DEBUG] 处理完成: {result}")
        return result

    except Exception as e:
        logger.error(f"处理文本时发生错误: {str(e)}")
        return {
            "index": index,
            "text": pure_text,
            "content": source_text,
            "tts": settings.EMPTY_VOICE_URL,
            "status": "error",
            "error": str(e)
        }
    finally:
        # 确保清理任何需要关闭的资源
        pass

def process_text(global_index, input_text, headers=None):
    segments = split_by_pipe(input_text)
    current_index = global_index
    tasks = []  # 存储需要实际处理的任务
    logger.debug(f"global_index {global_index}")

    # 先处理所有分段，过滤空白文本
    for segment in segments:
        pure_text = convert_text_to_plain_markdown2(segment)

        if is_all_space(pure_text):
            # 直接yield空白结果，不需要创建线程
            logger.info(f"直接yield空白结果，不需要创建线程 {current_index} {pure_text} {repr(segment)}")
            yield {
                "index": current_index,
                "text": "",
                "content": segment,
                "tts": settings.EMPTY_VOICE_URL,
                "status": "success"
            }
            current_index += 1
            continue

        if has_formula(pure_text):
            # 添加公式处理任务
            tasks.append({
                "type": "formula",
                "index": current_index,
                "content": segment,
                "pure_text": pure_text
            })
            current_index += 1
        else:
            # 处理非公式文本，先分段
            sub_segments = handle_non_formula_segment(segment)
            for sub_segment in sub_segments:
                sub_pure_text = convert_text_to_plain_markdown2(sub_segment)
                if not is_all_space(sub_pure_text):  # 只处理非空白子片段
                    tasks.append({
                        "type": "normal",
                        "index": current_index,
                        "content": sub_segment,
                        "pure_text": sub_pure_text
                    })
                    current_index += 1
                else:
                    # 空白子片段直接yield结果
                    logger.info(f"空白子片段直接yield结果 {current_index} {repr(sub_segment)}")
                    yield {
                        "index": current_index,
                        "text": "",
                        "content": sub_segment,
                        "tts": settings.EMPTY_VOICE_URL,
                        "status": "success"
                    }
                    current_index += 1

    # 只对实际需要处理的任务使用多线程
    def process_task(task):
        try:
            if task["type"] == "formula":
                return formula_voice_process(
                    task["index"],
                    task["content"],
                    task["pure_text"],
                    headers=headers
                )
            else:
                return normal_text_process(
                    task["index"],
                    task["content"],
                    task["pure_text"],
                    headers=headers
                )
        except Exception as e:
            return {
                "index": task["index"],
                "text": task["content"],
                "content": task["content"],
                "tts": settings.EMPTY_VOICE_URL,
                "status": "error",
                "error": str(e)
            }

    # 使用线程池处理非空白任务
    if tasks:  # 只有在有实际任务时才创建线程池
        with ThreadPoolExecutor(max_workers=min(len(tasks), 10)) as executor:
            futures = [executor.submit(process_task, task) for task in tasks]

            # 按顺序获取结果
            for future in futures:
                try:
                    result = future.result()
                    logger.info(f"[DEBUG] 处理完成: {result}")
                    yield result
                except Exception as e:
                    logger.error(f"处理失败: {str(e)}")

def read_file(file_path: str) -> str:
    """
    读取文件内容

    Args:
        file_path: 文件路径

    Returns:
        str: 文件内容
    """
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            return file.read()
    except Exception as e:
        logger.error(f"读取文件失败: {str(e)}")
        return ""

if __name__ == "__main__":

    _html = """
    <ol>
        <li>升级小火箭 <strong>安装证书</strong> 启用mitm</li>
        <li>第二步<a href="#">链接</a>操作</li>
        <li>第三步操作</li>
    </ol>
    <p>其他内容</p>
    <ol>
        <li>另一个列表第一步</li>
        <li>另一个列表第二步</li>
    </ol>
    """

    soup = BeautifulSoup(_html, 'html.parser')
    add_numbers_to_li(soup)
    # print(str(soup))
    # exit(0)
    #

    # sample_text = read_file("/Users/tommygreen/Documents/work/realtime-advio/services/realtime.md")
    # logger.info(f"[DEBUG] 测试样例:\n{sample_text}")
    # for each in sample_text.split('\n'):
    #     o = convert_text_to_plain_markdown2(each)
    #     print(o)
    # exit(0)

    # 设置信号处理
    import signal
    def signal_handler(signum, frame):
        logger.info("接收到退出信号，正在清理...")
        sys.exit(0)

    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    try:
        logger.info("\n[DEBUG] ====== 程序开始 ======")
        # 获取当前脚本文件所在的目录
        script_dir = os.path.dirname(os.path.abspath(__file__))
        # 构建相对于脚本目录的 realtime.md 路径
        realtime_md_path = os.path.join(script_dir, "realtime.md")
        sample_text = read_file(realtime_md_path)
        logger.info(f"[DEBUG] 测试样例:\n{sample_text}")
        index = 0

        buffer = TextBuffer()
        buffer.append(sample_text)
        lines = buffer.read_all()
        for line in lines:

            generator = process_text(index, line)
            results = []

            for item in generator:
                results.append(item)
                logger.info(f"处理结果: {json.dumps(item, ensure_ascii=False)}")

            logger.info("\n[DEBUG] ====== 程序结束 ======")
            logger.info(f"最终输出:\n{json.dumps(results, ensure_ascii=False)}")

            text_list = [item['text'] for item in results]
            logger.info(f"最终朗读文本:\n{''.join(text_list)}")

            text_list = [item['content'] for item in results]
            logger.info(f"最终原始文本:\n{''.join(text_list)}")

            index += 1

    except KeyboardInterrupt:
        logger.info("程序被用户中断")
    except Exception as e:
        logger.error(f"程序执行出错: {str(e)}")
    finally:
        logger.info("程序清理完成")
